{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Sebastian\\\\Desktop\\\\frontend-nextjs\\\\src\\\\components\\\\forms\\\\usuario\\\\RegistrarUsuario.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup'; // import Services from '@services/serviciosRegistro'\n\nimport { Button, TextInput } from 'react-materialize';\nimport { useToasts } from 'react-toast-notifications';\n\nvar RegistrarUsuario = function RegistrarUsuario() {\n  _s();\n\n  var _useToasts = useToasts(),\n      addToast = _useToasts.addToast;\n\n  var registerSchema = Yup.object().shape({\n    nombres: Yup.string().trim().max(60, 'Máximo 60 caracteres').required('Este campo es obligatorio'),\n    apellidos: Yup.string().trim().max(60, 'Máximo 60 caracteres').required('Este campo es obligatorio'),\n    correo: Yup.string().trim().required('Este campo es obligatorio').email('Correo electronico invalido').min(5, 'Mínimo 5 caracteres'),\n    clave: Yup.string().required('Este campo es obligatorio').matches('^(?=\\\\w*\\\\d)(?=\\\\w*[A-Z])(?=\\\\w*[a-z])\\\\S{8,20}$', 'La clave debe tener al entre 8 y 20 caracteres, un dígito, una letra minúscula y una letra mayúscula.')\n  });\n\n  var registerNewUser = function registerNewUser(values) {\n    Services.newUser(values, function (_ref) {\n      var data = _ref.data;\n      addToast('¡Usuario registrado con exito!', {\n        appearance: 'success'\n      });\n      history.push(\"notificacion/activar-cuenta\");\n    }, function (error) {\n      if (error.response) {\n        var status = error.response.status;\n\n        if (status === 409) {\n          addToast('Cuenta actualmente existente', {\n            appearance: 'info'\n          });\n        } else if (status === 422) {\n          addToast('Valida la información, por favor', {\n            appearance: 'warning'\n          });\n        } else if (status === 500) {\n          addToast('oh no :(, no eres tú somos nosotros, algo a ido mal', {\n            appearance: 'error'\n          });\n        }\n      } else {\n        addToast('oh no :(, no eres tú somos nosotros, algo a ido mal', {\n          appearance: 'error'\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hola mundo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false);\n};\n\n_s(RegistrarUsuario, \"U6FMp6hByBBuG5GNVFUFStpOnow=\", false, function () {\n  return [useToasts];\n});\n\n_c = RegistrarUsuario;\nexport default RegistrarUsuario;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegistrarUsuario\");","map":{"version":3,"sources":["C:/Users/Sebastian/Desktop/frontend-nextjs/src/components/forms/usuario/RegistrarUsuario.jsx"],"names":["React","useFormik","Yup","Button","TextInput","useToasts","RegistrarUsuario","addToast","registerSchema","object","shape","nombres","string","trim","max","required","apellidos","correo","email","min","clave","matches","registerNewUser","values","Services","newUser","data","appearance","history","push","error","response","status"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AAEA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;AAEA,SAASC,SAAT,QAA0B,2BAA1B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAAA,mBAEND,SAAS,EAFH;AAAA,MAEnBE,QAFmB,cAEnBA,QAFmB;;AAI3B,MAAMC,cAAc,GAAGN,GAAG,CAACO,MAAJ,GAAaC,KAAb,CAAmB;AACtCC,IAAAA,OAAO,EAAET,GAAG,CAACU,MAAJ,GAAaC,IAAb,GACJC,GADI,CACA,EADA,EACI,sBADJ,EAEJC,QAFI,CAEK,2BAFL,CAD6B;AAItCC,IAAAA,SAAS,EAAEd,GAAG,CAACU,MAAJ,GAAaC,IAAb,GACNC,GADM,CACF,EADE,EACE,sBADF,EAENC,QAFM,CAEG,2BAFH,CAJ2B;AAOtCE,IAAAA,MAAM,EAAEf,GAAG,CAACU,MAAJ,GAAaC,IAAb,GACHE,QADG,CACM,2BADN,EAEHG,KAFG,CAEG,6BAFH,EAGHC,GAHG,CAGC,CAHD,EAGI,qBAHJ,CAP8B;AAWtCC,IAAAA,KAAK,EAAElB,GAAG,CAACU,MAAJ,GACFG,QADE,CACO,2BADP,EAEFM,OAFE,CAEM,kDAFN,EAE0D,uGAF1D;AAX+B,GAAnB,CAAvB;;AAgBA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAAY;AAChCC,IAAAA,QAAQ,CAACC,OAAT,CAAiBF,MAAjB,EAAyB,gBAAc;AAAA,UAAXG,IAAW,QAAXA,IAAW;AACnCnB,MAAAA,QAAQ,CAAC,gCAAD,EAAmC;AAAEoB,QAAAA,UAAU,EAAE;AAAd,OAAnC,CAAR;AACAC,MAAAA,OAAO,CAACC,IAAR,CAAa,6BAAb;AACH,KAHD,EAGG,UAACC,KAAD,EAAW;AACV,UAAIA,KAAK,CAACC,QAAV,EAAoB;AAAA,YACRC,MADQ,GACGF,KAAK,CAACC,QADT,CACRC,MADQ;;AAEhB,YAAIA,MAAM,KAAK,GAAf,EAAoB;AAChBzB,UAAAA,QAAQ,CAAC,8BAAD,EAAiC;AAAEoB,YAAAA,UAAU,EAAE;AAAd,WAAjC,CAAR;AACH,SAFD,MAEO,IAAIK,MAAM,KAAK,GAAf,EAAoB;AACvBzB,UAAAA,QAAQ,CAAC,kCAAD,EAAqC;AAAEoB,YAAAA,UAAU,EAAE;AAAd,WAArC,CAAR;AACH,SAFM,MAEA,IAAIK,MAAM,KAAK,GAAf,EAAoB;AACvBzB,UAAAA,QAAQ,CAAC,qDAAD,EAAwD;AAAEoB,YAAAA,UAAU,EAAE;AAAd,WAAxD,CAAR;AACH;AACJ,OATD,MASO;AACHpB,QAAAA,QAAQ,CAAC,qDAAD,EAAwD;AAAEoB,UAAAA,UAAU,EAAE;AAAd,SAAxD,CAAR;AACH;AACJ,KAhBD;AAiBH,GAlBD;;AAoBA,sBACI;AAAA,2BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CA7CD;;GAAMrB,gB;UAEmBD,S;;;KAFnBC,gB;AA+CN,eAAeA,gBAAf","sourcesContent":["import React from 'react'\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n// import Services from '@services/serviciosRegistro'\r\n\r\nimport { Button, TextInput } from 'react-materialize';\r\n\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nconst RegistrarUsuario = () => {\r\n\r\n    const { addToast } = useToasts();\r\n\r\n    const registerSchema = Yup.object().shape({\r\n        nombres: Yup.string().trim()\r\n            .max(60, 'Máximo 60 caracteres')\r\n            .required('Este campo es obligatorio'),\r\n        apellidos: Yup.string().trim()\r\n            .max(60, 'Máximo 60 caracteres')\r\n            .required('Este campo es obligatorio'),\r\n        correo: Yup.string().trim()\r\n            .required('Este campo es obligatorio')\r\n            .email('Correo electronico invalido')\r\n            .min(5, 'Mínimo 5 caracteres'),\r\n        clave: Yup.string()\r\n            .required('Este campo es obligatorio')\r\n            .matches('^(?=\\\\w*\\\\d)(?=\\\\w*[A-Z])(?=\\\\w*[a-z])\\\\S{8,20}$', 'La clave debe tener al entre 8 y 20 caracteres, un dígito, una letra minúscula y una letra mayúscula.')\r\n    });\r\n\r\n    const registerNewUser = (values) => {\r\n        Services.newUser(values, ({ data }) => {\r\n            addToast('¡Usuario registrado con exito!', { appearance: 'success' });\r\n            history.push(\"notificacion/activar-cuenta\");\r\n        }, (error) => {\r\n            if (error.response) {\r\n                const { status } = error.response;\r\n                if (status === 409) {\r\n                    addToast('Cuenta actualmente existente', { appearance: 'info' });\r\n                } else if (status === 422) {\r\n                    addToast('Valida la información, por favor', { appearance: 'warning' });\r\n                } else if (status === 500) {\r\n                    addToast('oh no :(, no eres tú somos nosotros, algo a ido mal', { appearance: 'error' });\r\n                }\r\n            } else {\r\n                addToast('oh no :(, no eres tú somos nosotros, algo a ido mal', { appearance: 'error' });\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Hola mundo</h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegistrarUsuario"]},"metadata":{},"sourceType":"module"}